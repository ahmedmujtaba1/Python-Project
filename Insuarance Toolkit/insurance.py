{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "90fe61e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "from webdriver_manager.chrome import ChromeDriverManager\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from selenium.webdriver.common.action_chains import ActionChains\n",
    "import csv\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "import time\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "98a3733b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ABC\\AppData\\Local\\Temp\\ipykernel_1192\\2319709279.py:1: DeprecationWarning: executable_path has been deprecated, please pass in a Service object\n",
      "  driver = webdriver.Chrome(ChromeDriverManager().install())\n"
     ]
    }
   ],
   "source": [
    "driver = webdriver.Chrome(ChromeDriverManager().install())\n",
    "driver.get(\"https://insurancetoolkits.com/fex/quoter\")\n",
    "driver.maximize_window()\n",
    "time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3a056e4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# example data\n",
    "headers = ['Face_amount']\n",
    "headers.extend(['Level'])\n",
    "headers.extend(['Date'])\n",
    "headers.extend(['Nicotine Use'])\n",
    "headers.extend(['Payments'])\n",
    "headers.extend(['Health Condition'])\n",
    "c = 1\n",
    "for y in range(21):\n",
    "    headers.extend([\"Company\"+str(c)])\n",
    "    headers.extend([\"Monthly\"+str(c)])\n",
    "    headers.extend([\"Coverage Type\"+str(c)])\n",
    "    c += 1\n",
    "# headers\n",
    "# write data to csv file in a single row\n",
    "with open('daniel.csv', mode='w', newline='') as file:\n",
    "    writer = csv.writer(file)\n",
    "    writer.writerow(headers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b1955977",
   "metadata": {},
   "outputs": [],
   "source": [
    "email = \"jenglert@theromanfinancialgroup.com\"\n",
    "email_holder = driver.find_element(By.XPATH, \"//input[@name= 'email']\")\n",
    "email_holder.send_keys(email)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bf3d822f",
   "metadata": {},
   "outputs": [],
   "source": [
    "password = \"Roman2022!\"\n",
    "password_holder = driver.find_element(By.XPATH, \"//input[@name= 'password']\")\n",
    "password_holder.send_keys(password)\n",
    "password_holder.send_keys(Keys.ENTER)\n",
    "time.sleep(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f49decc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>face amount</th>\n",
       "      <th>Level</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Date</th>\n",
       "      <th>Nicotine Use</th>\n",
       "      <th>Payments</th>\n",
       "      <th>Health Condition</th>\n",
       "      <th>Combined Data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/1940</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Abdominal aortic aneurysm</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10001</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/1941</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Acute cholecystitis</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10002</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/1942</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Acute lymphoblastic leukaemia</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10003</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/1943</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Acute myeloid leukaemia</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10004</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/1944</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Acute pancreatitis</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>10282</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/2222</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Warts and verrucas</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283</th>\n",
       "      <td>10283</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/2223</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Whooping cough</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>10284</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/2224</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Wilms’ tumour</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>10285</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/2225</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Womb (uterus) cancer</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286</th>\n",
       "      <td>10286</td>\n",
       "      <td>Graded/modified</td>\n",
       "      <td>male</td>\n",
       "      <td>01/01/2226</td>\n",
       "      <td>none</td>\n",
       "      <td>Bank draft/EFT</td>\n",
       "      <td>Yellow fever</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>287 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     face amount             Level Gender        Date Nicotine Use  \\\n",
       "0           10000  Graded/modified  male   01/01/1940         none   \n",
       "1           10001  Graded/modified  male   01/01/1941         none   \n",
       "2           10002  Graded/modified  male   01/01/1942         none   \n",
       "3           10003  Graded/modified  male   01/01/1943         none   \n",
       "4           10004  Graded/modified  male   01/01/1944         none   \n",
       "..            ...              ...    ...         ...          ...   \n",
       "282         10282  Graded/modified  male   01/01/2222         none   \n",
       "283         10283  Graded/modified  male   01/01/2223         none   \n",
       "284         10284  Graded/modified  male   01/01/2224         none   \n",
       "285         10285  Graded/modified  male   01/01/2225         none   \n",
       "286         10286  Graded/modified  male   01/01/2226         none   \n",
       "\n",
       "           Payments              Health Condition   Combined Data  \n",
       "0    Bank draft/EFT      Abdominal aortic aneurysm            NaN  \n",
       "1    Bank draft/EFT            Acute cholecystitis            NaN  \n",
       "2    Bank draft/EFT  Acute lymphoblastic leukaemia            NaN  \n",
       "3    Bank draft/EFT        Acute myeloid leukaemia            NaN  \n",
       "4    Bank draft/EFT             Acute pancreatitis            NaN  \n",
       "..              ...                            ...            ...  \n",
       "282  Bank draft/EFT             Warts and verrucas            NaN  \n",
       "283  Bank draft/EFT                 Whooping cough            NaN  \n",
       "284  Bank draft/EFT                  Wilms’ tumour            NaN  \n",
       "285  Bank draft/EFT           Womb (uterus) cancer            NaN  \n",
       "286  Bank draft/EFT                   Yellow fever            NaN  \n",
       "\n",
       "[287 rows x 8 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_excel(\"demo.xlsx\")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dd797380",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "https://insurancetoolkits.com/img/landing/companies/amam.png\n",
      "$256.08\n",
      "Golden Solution Graded\n",
      "https://insurancetoolkits.com/img/landing/companies/great_western.png\n",
      "$264.10\n",
      "Graded\n",
      "https://insurancetoolkits.com/img/landing/companies/amam.png\n",
      "$270.48\n",
      "Golden Solution ROP\n",
      "https://insurancetoolkits.com/img/landing/companies/amam.png\n",
      "$290.69\n",
      "Platinum Solution Legacy Plan Graded\n",
      "https://insurancetoolkits.com/img/landing/companies/amam.png\n",
      "$306.80\n",
      "Platinum Solution Legacy Plan ROP\n",
      "==============================================================\n",
      "5\n",
      "https://insurancetoolkits.com/img/landing/companies/amam.png\n",
      "$245.19\n",
      "Golden Solution Graded\n",
      "https://insurancetoolkits.com/img/landing/companies/great_western.png\n",
      "$248.01\n",
      "Graded\n",
      "https://insurancetoolkits.com/img/landing/companies/amam.png\n",
      "$254.35\n",
      "Golden Solution ROP\n",
      "https://insurancetoolkits.com/img/landing/companies/amam.png\n",
      "$278.50\n",
      "Platinum Solution Legacy Plan Graded\n",
      "https://insurancetoolkits.com/img/landing/companies/amam.png\n",
      "$288.75\n",
      "Platinum Solution Legacy Plan ROP\n"
     ]
    },
    {
     "ename": "PermissionError",
     "evalue": "[Errno 13] Permission denied: 'daniel.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mPermissionError\u001b[0m                           Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_1192\\1345985588.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     92\u001b[0m         \u001b[0mc\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     93\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 94\u001b[1;33m     \u001b[1;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'daniel.csv'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'a'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnewline\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m''\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mfile\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     95\u001b[0m         \u001b[0mwriter\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcsv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwriter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     96\u001b[0m     \u001b[1;31m#     writer.writerow([face_amount,coverage,age,nicotine_use,price,health_condition])\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mPermissionError\u001b[0m: [Errno 13] Permission denied: 'daniel.csv'"
     ]
    }
   ],
   "source": [
    "n = 0\n",
    "while True:\n",
    "    \n",
    "\n",
    "\n",
    "    face_amount = int(df['face amount '][n])\n",
    "    face_amount_holder = driver.find_element(By.XPATH, \"//input[@placeholder= 'Face Amount']\")\n",
    "    face_amount_holder.send_keys(face_amount)\n",
    "    time.sleep(0.5)\n",
    "\n",
    "\n",
    "    coverage = df['Level'][n]\n",
    "    coverage_holder = driver.find_element(By.XPATH,\"/html/body/div[1]/div/div/main/div/div/div[2]/div/div[1]/div[1]/div[2]/div[2]/div/div/div[2]/select\")\n",
    "    coverage_holder.send_keys(coverage)\n",
    "\n",
    "\n",
    "    age = df['Date'][n]\n",
    "    month = age.split('/')[0]\n",
    "    date = age.split('/')[1]\n",
    "    year = age.split('/')[2]\n",
    "\n",
    "    month_holder = driver.find_element(By.XPATH, \"//input[@placeholder='mm']\")\n",
    "    month_holder.send_keys(month)\n",
    "\n",
    "    date_holder = driver.find_element(By.XPATH, \"//input[@placeholder='dd']\")\n",
    "    date_holder.send_keys(date)\n",
    "\n",
    "    year_holder = driver.find_element(By.XPATH, \"//input[@placeholder='yyyy']\")\n",
    "    year_holder.send_keys(year)\n",
    "\n",
    "    nicotine_use = df['Nicotine Use'][n]\n",
    "    nicotine_use_holder = driver.find_element(By.XPATH, \"/html/body/div[1]/div/div/main/div/div/div[2]/div/div[1]/div[2]/div[2]/div[5]/div/div/div[2]/select\")\n",
    "    nicotine_use_holder.send_keys(nicotine_use)\n",
    "\n",
    "    payment = df['Payments'][n]\n",
    "    payment_type_holder = driver.find_element(By.XPATH, \"/html/body/div[1]/div/div/main/div/div/div[2]/div/div[1]/div[2]/div[2]/div[6]/div/div/div[2]/select\")\n",
    "    payment_type_holder.send_keys(payment)\n",
    "\n",
    "    health_condition = df['Health Condition '][n]\n",
    "    health_condition_holder = driver.find_element(By.XPATH, \"//input[@placeholder='Enter Health Condition']\")\n",
    "    health_condition_holder.send_keys(health_condition)\n",
    "    time.sleep(2)\n",
    "\n",
    "    get_quote_holder = driver.find_element(By.XPATH, \"/html/body/div[1]/div/div/main/div/div/div[3]/button\")\n",
    "    driver.execute_script(\"arguments[0].click();\", get_quote_holder)\n",
    "    time.sleep(5)\n",
    "\n",
    "\n",
    "    j = driver.find_elements(By.XPATH, \"//div[@class = '_quote-result-collapsed-info _quote-results-4']\")\n",
    "    img_class = driver.find_elements(By.XPATH,\"//div[@class = '_quote-result-collapsed-info _quote-results-4']//img[@class ='max-pxw-200']\")\n",
    "    price_coverages = driver.find_elements(By.XPATH, \"//div[@class = '_quote-result-collapsed-info _quote-results-4']\")\n",
    "\n",
    "    print(len(j))\n",
    "#     coverage_list = []\n",
    "    img_list = []\n",
    "    coverages_list = []\n",
    "    price_list = []\n",
    "    for i in range(len(j)):\n",
    "        img = img_class[i].get_attribute('src')\n",
    "        price = price_coverages[i].text.split('\\n')[0]\n",
    "        coverages = price_coverages[i].text.split('\\n')[1]\n",
    "        img_list.append(img)\n",
    "        coverages_list.append(coverages)\n",
    "        price_list.append(price)\n",
    "        print(img)\n",
    "        print(price)\n",
    "        print(coverages)\n",
    "        \n",
    "#         with open('daniel.csv', 'a', newline='', encoding=\"utf-8\") as f:\n",
    "#             writer = csv.writer(f)\n",
    "#             writer.writerow([face_amount, coverage,age,nicotine_use,health_condition,img,price,coverages])\n",
    "\n",
    "#                import pandas as pd  \n",
    "       \n",
    "    import csv\n",
    "\n",
    "    data = {\n",
    "    'Face_amount': face_amount,\n",
    "    'Level': coverage,\n",
    "    'Date': age,\n",
    "    'Nicotine Use': nicotine_use,\n",
    "    'Payments': price,\n",
    "    'Health Condition': health_condition,\n",
    "    }\n",
    "    c = 1\n",
    "    for h in range(21):\n",
    "        try:\n",
    "            data.update({\"Company\"+str(c) : img_list[n]})\n",
    "            data.update({\"Monthly\"+str(c) : price_list[n]})\n",
    "            data.update({\"Coverage Type\"+str(c) : price_list[n]})\n",
    "        except:pass\n",
    "        c += 1 \n",
    "\n",
    "    with open('daniel.csv', mode='a', newline='') as file:\n",
    "        writer = csv.writer(file)\n",
    "    #     writer.writerow([face_amount,coverage,age,nicotine_use,price,health_condition])\n",
    "        rows = [face_amount,coverage,age,nicotine_use,price,health_condition]\n",
    "        for x in range(21):\n",
    "\n",
    "            try:\n",
    "#                 ro = img_list[n],price_list[n],coverages_list[n]]\n",
    "    #             writer.writerow([\"\",\"\",\"\",\"\",\"\",\"\",img_list[n],price_list[n],coverages_list[n]])\n",
    "                rows.append(img_list[x])\n",
    "                rows.append(price_list[x])\n",
    "                rows.append(coverages_list[x])\n",
    "            except:pass\n",
    "        writer.writerow(rows)\n",
    "        \n",
    "        \n",
    "    n += 1\n",
    "    clear_fields_holder = driver.find_element(By.XPATH, \"//div[@class = '_load-save']//*[text()= 'Clear Fields']\")\n",
    "    driver.execute_script(\"arguments[0].click();\", clear_fields_holder)\n",
    "    time.sleep(1)\n",
    "    \n",
    "    Actions = ActionChains(driver)\n",
    "\n",
    "    health_condition_holder = driver.find_element(By.XPATH, \"//input[@placeholder='Enter Health Condition']\")\n",
    "    driver.execute_script(\"arguments[0].click();\", health_condition_holder)\n",
    "    time.sleep(0.5)\n",
    "    Actions.key_down(Keys.CONTROL).send_keys(\"a\").key_up(Keys.CONTROL).perform()\n",
    "    time.sleep(0.5)\n",
    "    Actions.key_down(Keys.BACK_SPACE).key_up(Keys.BACK_SPACE).perform()\n",
    "    \n",
    "    time.sleep(1)\n",
    "    print(\"==============================================================\")\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15f30fcc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
